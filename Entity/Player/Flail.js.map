{"version":3,"file":"Flail.js","sourceRoot":"","sources":["../../../src/Entity/Player/Flail.ts"],"names":[],"mappings":";;AAAA,8CAAuC;AAGvC,uCAAgC;AAEhC,yCAAkC;AAGlC;;GAEG;AACH,MAAqB,KAAM,SAAQ,oBAAU;IAI3C,YAAY,IAAU,EAAE,KAAa;QACnC,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;QAEpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;QACf,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC/B,CAAC;IAED,WAAW,CAAC,MAAc,EAAE,UAAmB;QAC7C,IAAI,UAAU,EAAE;YACd,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzB,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SAC7B;QAED,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC3B,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvB,CAAC;IAED,SAAS;QACP,KAAK,CAAC,SAAS,EAAE,CAAC;QAClB,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QAEvB,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;QAC5B,MAAM,QAAQ,GAAG,IAAI,GAAG,SAAS,GAAG,GAAG,CAAC;QAExC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;YAClC,MAAM,IAAI,GAAG,IAAI,cAAI,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YAE3C,oFAAoF;YACpF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAM,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SACtG;IACH,CAAC;IAED,IAAI,CAAC,IAAY;QACf,sEAAsE;QAEtE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC;QAE5B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnB,CAAC;CACF;AArDD,wBAqDC","sourcesContent":["import BaseEntity from \"../BaseEntity\";\nimport Game from \"../../Game\";\nimport Player from \"./Player\";\nimport Food from \"../Food/Food\";\nimport Rope from \"./Rope/Rope\";\nimport Vector from \"../../Vector\";\nimport { Writer } from \"../../Coder\";\n\n/**\n * Child of a player\n */\nexport default class Flail extends BaseEntity {\n  public owner: Player;\n  public rope?: Rope | null;\n\n  constructor(game: Game, owner: Player) {\n    super(game);\n    this.owner = owner;\n\n    this.position = this.owner.position;\n\n    this.rope = null;\n\n    this.size = 50;\n    this.isAffectedByRope = true;\n    this.collides = true;\n    this.detectsCollision = true;\n  }\n\n  writeBinary(writer: Writer, isCreation: boolean) {\n    if (isCreation) {\n      writer.vu(1);\n      writer.string(this.name);\n      writer.vu(1);\n      writer.vu(this.owner.color);\n    }\n\n    writer.vi(this.position.x);\n    writer.vi(this.position.y);\n    writer.vu(this.size);\n  }\n\n  terminate() {\n    super.terminate();\n    const area = this.area;\n\n    const foodCount = this.size;\n    const foodSize = area / foodCount * 0.7;\n\n    for (let i = 0; i < foodCount; i++) {\n      const food = new Food(this.game, foodSize);\n\n      // using polar coords in order to make the food more consentrat,d towards the middle\n      food.position = this.position.add(Vector.fromPolar(Math.random() * 6.29, Math.random() * this.size));\n    }\n  }\n\n  tick(tick: number) {\n    // if (this.size > this.game.size / 3) this.size = this.game.size / 3;\n\n    this.restLength = this.size;\n\n    super.tick(tick);\n  }\n}\n"]}