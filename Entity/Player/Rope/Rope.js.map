{"version":3,"file":"Rope.js","sourceRoot":"","sources":["../../../../src/Entity/Player/Rope/Rope.ts"],"names":[],"mappings":"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","sourcesContent":["import Entity from \"../../Entity\";\nimport BaseEntity from \"../../BaseEntity\";\nimport Game from \"../../../Game\";\nimport RopeSegment from \"./RopeSegment\";\nimport Player from \"../Player\";\nimport Vector from \"../../../Vector\";\nimport { Writer } from \"../../../Coder\";\n\nexport default class Rope extends BaseEntity {\n  public k: number;\n  public length: number;\n  public segments: Set<BaseEntity>;\n  public owner: BaseEntity;\n\n  constructor(game: Game, entity1: BaseEntity, entity2: BaseEntity, length: number, springConstant: number, restLength: number) {\n    super(game);\n\n    this.length = length;\n    this.k = springConstant;\n    this.restLength = restLength;\n    this.owner = entity1;\n\n    this.detectsCollision = false;\n\n    this.segments = new Set([this.owner]);\n\n    for (let i = 0; i < this.length; i++) {\n      const ropeSegment = new RopeSegment(this.game, this);\n\n      ropeSegment.restLength = this.restLength;\n\n      this.segments.add(ropeSegment);\n    }\n\n    this.segments.add(entity2);\n  }\n\n  /** @ts-ignore */\n  get position() {\n    return this.owner.position;\n  }\n\n  /** @ts-ignore */\n  set position(a: any) {}\n\n  writeBinary(writer: Writer, isCreation: boolean) {\n    if (isCreation) {\n      writer.vu(2);\n\n      writer.vu(this.segments.size);\n    }\n\n    this.segments.forEach(segment => {\n      writer.vi(segment.position.x);\n      writer.vi(segment.position.y);\n    });\n  }\n\n  terminate() {\n    super.terminate();\n\n    this.segments.forEach(segment => {\n      if (segment instanceof RopeSegment) segment.terminate();\n    });\n  }\n\n  tick(tick: number) {\n    const segments = Array.from(this.segments);\n\n    for (let i = 1; i < segments.length; i++) {\n      const a = segments[i - 1];\n      const b = segments[i];\n\n      const delta = a.position.subtract(b.position);\n      const x = delta.mag - Math.max(a.restLength, b.restLength);\n      \n      let force = delta.unitVector.scale(-this.k * x);\n      \n      if (a.isAffectedByRope) a.applyForce(force.x, force.y, false);\n      \n      force = force.scale(-1);\n\n      if (b.isAffectedByRope) b.applyForce(force.x, force.y, false);\n    }\n  }\n}\n"]}